Binary files CoMD-1.1/bin/CoMD-openmp-mpi and ../CoMD/bin/CoMD-openmp-mpi differ
diff -ruN CoMD-1.1/.git/config ../CoMD/.git/config
--- CoMD-1.1/.git/config	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/config	2023-10-22 18:27:09.976844794 -0400
@@ -0,0 +1,11 @@
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+[remote "origin"]
+	url = git@github.com:ECP-copa/CoMD.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "master"]
+	remote = origin
+	merge = refs/heads/master
diff -ruN CoMD-1.1/.git/description ../CoMD/.git/description
--- CoMD-1.1/.git/description	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/description	2023-10-22 18:27:09.102131000 -0400
@@ -0,0 +1 @@
+Unnamed repository; edit this file 'description' to name the repository.
diff -ruN CoMD-1.1/.git/HEAD ../CoMD/.git/HEAD
--- CoMD-1.1/.git/HEAD	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/HEAD	2023-10-22 18:27:09.974974000 -0400
@@ -0,0 +1 @@
+ref: refs/heads/master
diff -ruN CoMD-1.1/.git/hooks/applypatch-msg.sample ../CoMD/.git/hooks/applypatch-msg.sample
--- CoMD-1.1/.git/hooks/applypatch-msg.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/applypatch-msg.sample	2023-10-22 18:27:09.101915000 -0400
@@ -0,0 +1,15 @@
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
diff -ruN CoMD-1.1/.git/hooks/commit-msg.sample ../CoMD/.git/hooks/commit-msg.sample
--- CoMD-1.1/.git/hooks/commit-msg.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/commit-msg.sample	2023-10-22 18:27:09.101685000 -0400
@@ -0,0 +1,24 @@
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
diff -ruN CoMD-1.1/.git/hooks/fsmonitor-watchman.sample ../CoMD/.git/hooks/fsmonitor-watchman.sample
--- CoMD-1.1/.git/hooks/fsmonitor-watchman.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/fsmonitor-watchman.sample	2023-10-22 18:27:09.099488000 -0400
@@ -0,0 +1,173 @@
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {
+			"since": $last_update_token,
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
diff -ruN CoMD-1.1/.git/hooks/post-update.sample ../CoMD/.git/hooks/post-update.sample
--- CoMD-1.1/.git/hooks/post-update.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/post-update.sample	2023-10-22 18:27:09.101387000 -0400
@@ -0,0 +1,8 @@
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
diff -ruN CoMD-1.1/.git/hooks/pre-applypatch.sample ../CoMD/.git/hooks/pre-applypatch.sample
--- CoMD-1.1/.git/hooks/pre-applypatch.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/pre-applypatch.sample	2023-10-22 18:27:09.101146000 -0400
@@ -0,0 +1,14 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
diff -ruN CoMD-1.1/.git/hooks/pre-commit.sample ../CoMD/.git/hooks/pre-commit.sample
--- CoMD-1.1/.git/hooks/pre-commit.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/pre-commit.sample	2023-10-22 18:27:09.100944000 -0400
@@ -0,0 +1,49 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
diff -ruN CoMD-1.1/.git/hooks/pre-merge-commit.sample ../CoMD/.git/hooks/pre-merge-commit.sample
--- CoMD-1.1/.git/hooks/pre-merge-commit.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/pre-merge-commit.sample	2023-10-22 18:27:09.100709000 -0400
@@ -0,0 +1,13 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
diff -ruN CoMD-1.1/.git/hooks/prepare-commit-msg.sample ../CoMD/.git/hooks/prepare-commit-msg.sample
--- CoMD-1.1/.git/hooks/prepare-commit-msg.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/prepare-commit-msg.sample	2023-10-22 18:27:09.098617000 -0400
@@ -0,0 +1,42 @@
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
diff -ruN CoMD-1.1/.git/hooks/pre-push.sample ../CoMD/.git/hooks/pre-push.sample
--- CoMD-1.1/.git/hooks/pre-push.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/pre-push.sample	2023-10-22 18:27:09.100473000 -0400
@@ -0,0 +1,53 @@
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
diff -ruN CoMD-1.1/.git/hooks/pre-rebase.sample ../CoMD/.git/hooks/pre-rebase.sample
--- CoMD-1.1/.git/hooks/pre-rebase.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/pre-rebase.sample	2023-10-22 18:27:09.099197000 -0400
@@ -0,0 +1,169 @@
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
diff -ruN CoMD-1.1/.git/hooks/pre-receive.sample ../CoMD/.git/hooks/pre-receive.sample
--- CoMD-1.1/.git/hooks/pre-receive.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/pre-receive.sample	2023-10-22 18:27:09.100222000 -0400
@@ -0,0 +1,24 @@
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
diff -ruN CoMD-1.1/.git/hooks/push-to-checkout.sample ../CoMD/.git/hooks/push-to-checkout.sample
--- CoMD-1.1/.git/hooks/push-to-checkout.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/push-to-checkout.sample	2023-10-22 18:27:09.099977000 -0400
@@ -0,0 +1,78 @@
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
diff -ruN CoMD-1.1/.git/hooks/update.sample ../CoMD/.git/hooks/update.sample
--- CoMD-1.1/.git/hooks/update.sample	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/hooks/update.sample	2023-10-22 18:27:09.099742000 -0400
@@ -0,0 +1,128 @@
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
Binary files CoMD-1.1/.git/index and ../CoMD/.git/index differ
diff -ruN CoMD-1.1/.git/info/exclude ../CoMD/.git/info/exclude
--- CoMD-1.1/.git/info/exclude	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/info/exclude	2023-10-22 18:27:09.098059000 -0400
@@ -0,0 +1,6 @@
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
diff -ruN CoMD-1.1/.git/logs/HEAD ../CoMD/.git/logs/HEAD
--- CoMD-1.1/.git/logs/HEAD	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/logs/HEAD	2023-10-22 18:27:09.975794000 -0400
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 3d48396b77ca8caa3124bc2391f9139c3ffb556c x-tahat <x-tahat@login05.anvil.rcac.purdue.edu> 1698013629 -0400	clone: from github.com:ECP-copa/CoMD.git
diff -ruN CoMD-1.1/.git/logs/refs/heads/master ../CoMD/.git/logs/refs/heads/master
--- CoMD-1.1/.git/logs/refs/heads/master	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/logs/refs/heads/master	2023-10-22 18:27:09.976220000 -0400
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 3d48396b77ca8caa3124bc2391f9139c3ffb556c x-tahat <x-tahat@login05.anvil.rcac.purdue.edu> 1698013629 -0400	clone: from github.com:ECP-copa/CoMD.git
diff -ruN CoMD-1.1/.git/logs/refs/remotes/origin/HEAD ../CoMD/.git/logs/refs/remotes/origin/HEAD
--- CoMD-1.1/.git/logs/refs/remotes/origin/HEAD	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/logs/refs/remotes/origin/HEAD	2023-10-22 18:27:09.974000000 -0400
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 3d48396b77ca8caa3124bc2391f9139c3ffb556c x-tahat <x-tahat@login05.anvil.rcac.purdue.edu> 1698013629 -0400	clone: from github.com:ECP-copa/CoMD.git
Binary files CoMD-1.1/.git/objects/pack/pack-17564f9b9c51b48ad046df2baeb5fb577c08d629.idx and ../CoMD/.git/objects/pack/pack-17564f9b9c51b48ad046df2baeb5fb577c08d629.idx differ
Binary files CoMD-1.1/.git/objects/pack/pack-17564f9b9c51b48ad046df2baeb5fb577c08d629.pack and ../CoMD/.git/objects/pack/pack-17564f9b9c51b48ad046df2baeb5fb577c08d629.pack differ
diff -ruN CoMD-1.1/.git/packed-refs ../CoMD/.git/packed-refs
--- CoMD-1.1/.git/packed-refs	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/packed-refs	2023-10-22 18:27:09.961216000 -0400
@@ -0,0 +1,4 @@
+# pack-refs with: peeled fully-peeled sorted 
+678cf56cdab60adf2d0d5238a15508aaab722185 refs/remotes/origin/gh-pages
+3d48396b77ca8caa3124bc2391f9139c3ffb556c refs/remotes/origin/master
+3d48396b77ca8caa3124bc2391f9139c3ffb556c refs/tags/v1.1
diff -ruN CoMD-1.1/.git/refs/heads/master ../CoMD/.git/refs/heads/master
--- CoMD-1.1/.git/refs/heads/master	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/refs/heads/master	2023-10-22 18:27:09.975579544 -0400
@@ -0,0 +1 @@
+3d48396b77ca8caa3124bc2391f9139c3ffb556c
diff -ruN CoMD-1.1/.git/refs/remotes/origin/HEAD ../CoMD/.git/refs/remotes/origin/HEAD
--- CoMD-1.1/.git/refs/remotes/origin/HEAD	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/.git/refs/remotes/origin/HEAD	2023-10-22 18:27:09.974047000 -0400
@@ -0,0 +1 @@
+ref: refs/remotes/origin/master
diff -ruN CoMD-1.1/src-openmp/CoMD.c ../CoMD/src-openmp/CoMD.c
--- CoMD-1.1/src-openmp/CoMD.c	2016-03-02 11:36:57.000000000 -0500
+++ ../CoMD/src-openmp/CoMD.c	2023-10-23 14:02:46.749436080 -0400
@@ -47,7 +47,7 @@
 #include <strings.h>
 #include <unistd.h>
 #include <assert.h>
-
+#include <mpi.h>
 #include "CoMDTypes.h"
 #include "decomposition.h"
 #include "linkCells.h"
@@ -62,6 +62,10 @@
 #include "timestep.h"
 #include "constants.h"
 
+#if defined APPEKG
+#include "appekg.h"
+#endif
+
 #define REDIRECT_OUTPUT 0
 #define   MIN(A,B) ((A) < (B) ? (A) : (B))
 
@@ -87,6 +91,16 @@
 {
    // Prolog
    initParallel(&argc, &argv);
+   #if defined APPEKG
+   int appekg_myrank;
+   MPI_Comm_rank(MPI_COMM_WORLD, &appekg_myrank);
+   EKG_INITIALIZE(4, 1, 1, 0, appekg_myrank, 1);
+   EKG_NAME_HEARTBEAT(1,"advanceVelocity");
+   EKG_NAME_HEARTBEAT(2,"advancePosition");
+   EKG_NAME_HEARTBEAT(3,"redistributeAtoms");
+   EKG_NAME_HEARTBEAT(4,"kineticEnergy");
+   #endif
+
    profileStart(totalTimer);
    initSubsystems();
    timestampBarrier("Starting Initialization\n");
@@ -145,7 +159,9 @@
 
    timestampBarrier("CoMD Ending\n");
    destroyParallel();
-
+   #if defined APPEKG
+   EKG_FINALIZE();
+   #endif
    return 0;
 }
 
diff -ruN CoMD-1.1/src-openmp/Makefile ../CoMD/src-openmp/Makefile
--- CoMD-1.1/src-openmp/Makefile	1969-12-31 19:00:00.000000000 -0500
+++ ../CoMD/src-openmp/Makefile	2023-11-01 13:58:53.126562000 -0400
@@ -0,0 +1,124 @@
+# Makefile for src-openmp
+
+SHELL = /bin/bash
+
+### CoMD can be built in either double or single precision and with or
+### without MPI.  Select desired precision and MPI here.
+
+#-----------------------------------------------------------------------
+# APPEKG Section
+# JEC: choose to build with APPEKG or not, and specify where
+#      to find APPEKG stuff
+APPEKGDIR = /anvil/projects/x-cis230165/tools/ghappekg
+DO_APPEKG = ON
+
+ifeq ($(DO_APPEKG),ON)
+APPEKGCFLAGS = -DAPPEKG -I${APPEKGDIR}
+APPEKGLDOBJ = -L${APPEKGDIR} -lappekg -lpthread -lrt
+else
+APPEKGCFLAGS =
+APPEKGLDOBJ =
+endif
+
+
+# double precision (ON/OFF)
+DOUBLE_PRECISION = ON
+# MPI for parallel (ON/OFF)
+DO_MPI = ON
+
+### Set your desired C compiler and any necessary flags.  Note that CoMD
+### uses some c99 features.  You can also set flags for optimization and
+### specify paths to include files that the compiler can't find on its
+### own.  If you need any -L or -l switches to get C standard libraries
+### (such as -lm for the math library) put them in C_LIB.
+CC = mpicc
+CFLAGS = -std=c99 -fopenmp ${APPEKGCFLAGS}
+OPTFLAGS = -g -O5
+INCLUDES = 
+C_LIB = -lm
+
+
+### If you need to specify include paths, library paths, or link flags
+### for MPI, put them here.  Put both -L and -l switches into MPI_LIB.
+MPI_LIB =
+MPI_INCLUDE =
+
+### A place to specify any other include or library switches your
+### platform requires.
+OTHER_LIB =
+OTHER_INCLUDE =
+
+
+
+
+#########################################
+### Below here, it is pitch black.  
+### You are likely to be eaten by a grue.
+##########################################
+
+# clear all suffixes
+.SUFFIXES:
+# list only those that we use 
+.SUFFIXES: .c .o
+
+.PHONY: DEFAULT clean distclean depend
+
+BIN_DIR=../bin
+
+# Check for double precision
+ifeq ($(DOUBLE_PRECISION), ON)
+CFLAGS += -DDOUBLE
+else
+CFLAGS += -DSINGLE
+endif
+
+# Set executable name and add includes & libraries for MPI if needed.
+CoMD_VARIANT = CoMD-openmp
+ifeq ($(DO_MPI), ON)
+CoMD_VARIANT = CoMD-openmp-mpi
+INCLUDES += ${MPI_INCLUDE}
+CFLAGS += -DDO_MPI
+LDFLAGS += ${MPI_LIB} ${APPEKGLDOBJ}
+endif
+CoMD_EXE = ${BIN_DIR}/${CoMD_VARIANT}
+
+LDFLAGS += ${C_LIB} ${OTHER_LIB}
+CFLAGS  += ${OPTFLAGS} ${INCLUDES} ${OTHER_INCLUDE}
+
+
+SOURCES=$(wildcard *.c)
+OBJECTS=$(SOURCES:.c=.o)
+
+
+DEFAULT: ${CoMD_EXE}
+
+%.o: %.c
+	${CC} ${CFLAGS} -c $< -o $@
+
+${CoMD_EXE}: ${BIN_DIR} CoMD_info.h ${OBJECTS} 
+	${CC} ${CFLAGS} -o ${CoMD_EXE} ${OBJECTS} ${LDFLAGS}
+
+CoMD_info.h: Makefile
+	./generate_info_header ${CoMD_VARIANT} "$(CC)" "$(CFLAGS)" "$(LDFLAGS)"
+
+${BIN_DIR}:
+	@if [ ! -d ${BIN_DIR} ]; then mkdir -p ${BIN_DIR} ; fi
+
+clean:
+	rm -f *.o CoMD_info.h .depend
+
+distclean: clean
+	rm -f ${CoMD_EXE} .depend.bak
+	rm -rf html latex
+
+.depend: $(SOURCES)
+	@touch .depend
+	@$(MAKE) --no-print-directory depend
+
+depend:
+	@echo "Rebuilding dependencies..."
+	@$(MAKE) CoMD_info.h
+	@makedepend -f .depend -Y. --$(CFLAGS)-- $(SOURCES) 2> /dev/null
+
+
+-include .depend
diff -ruN CoMD-1.1/src-openmp/timestep.c ../CoMD/src-openmp/timestep.c
--- CoMD-1.1/src-openmp/timestep.c	2016-03-02 11:36:57.000000000 -0500
+++ ../CoMD/src-openmp/timestep.c	2024-04-02 15:29:57.348725000 -0400
@@ -10,6 +10,10 @@
 #include "parallel.h"
 #include "performanceTimers.h"
 
+#if defined APPEKG
+#include "appekg.h"
+#endif
+
 static void advanceVelocity(SimFlat* s, int nBoxes, real_t dt);
 static void advancePosition(SimFlat* s, int nBoxes, real_t dt);
 
@@ -71,12 +75,19 @@
    #pragma omp parallel for
    for (int iBox=0; iBox<nBoxes; iBox++)
    {
+      #ifdef APPEKG
+      EKG_BEGIN_HEARTBEAT(1,6300);
+      #endif
+ 
       for (int iOff=MAXATOMS*iBox,ii=0; ii<s->boxes->nAtoms[iBox]; ii++,iOff++)
       {
          s->atoms->p[iOff][0] += dt*s->atoms->f[iOff][0];
          s->atoms->p[iOff][1] += dt*s->atoms->f[iOff][1];
          s->atoms->p[iOff][2] += dt*s->atoms->f[iOff][2];
       }
+      #ifdef APPEKG
+      EKG_END_HEARTBEAT(1);
+      #endif
    }
 }
 
@@ -85,6 +96,10 @@
    #pragma omp parallel for
    for (int iBox=0; iBox<nBoxes; iBox++)
    {
+      #ifdef APPEKG
+      EKG_BEGIN_HEARTBEAT(2,3150);
+      #endif
+
       for (int iOff=MAXATOMS*iBox,ii=0; ii<s->boxes->nAtoms[iBox]; ii++,iOff++)
       {
          int iSpecies = s->atoms->iSpecies[iOff];
@@ -93,6 +108,10 @@
          s->atoms->r[iOff][1] += dt*s->atoms->p[iOff][1]*invMass;
          s->atoms->r[iOff][2] += dt*s->atoms->p[iOff][2]*invMass;
       }
+      #ifdef APPEKG
+      EKG_END_HEARTBEAT(2);
+      #endif
+
    }
 }
 
@@ -107,6 +126,9 @@
    #pragma omp parallel for reduction(+:kenergy)
    for (int iBox=0; iBox<s->boxes->nLocalBoxes; iBox++)
    {
+      #ifdef APPEKG
+      EKG_BEGIN_HEARTBEAT(4,3150);
+      #endif
       for (int iOff=MAXATOMS*iBox,ii=0; ii<s->boxes->nAtoms[iBox]; ii++,iOff++)
       {
          int iSpecies = s->atoms->iSpecies[iOff];
@@ -115,6 +137,9 @@
          s->atoms->p[iOff][1] * s->atoms->p[iOff][1] +
          s->atoms->p[iOff][2] * s->atoms->p[iOff][2] )*invMass;
       }
+      #ifdef APPEKG
+      EKG_END_HEARTBEAT(4);
+      #endif
    }
 
    eLocal[1] = kenergy;
@@ -151,5 +176,14 @@
 
    #pragma omp parallel for
    for (int ii=0; ii<sim->boxes->nTotalBoxes; ++ii)
+   {
+      #ifdef APPEKG
+      EKG_BEGIN_HEARTBEAT(3,3600);
+      #endif
       sortAtomsInCell(sim->atoms, sim->boxes, ii);
+      #ifdef APPEKG
+      EKG_END_HEARTBEAT(3);
+      #endif
+
+   }
 }
